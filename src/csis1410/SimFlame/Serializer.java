package csis1410.SimFlame;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.Set;

import javax.swing.JOptionPane;


/**
 * Contains methods for saving/loading the state of the world to/from the disk
 * 
 * @authors Adrianna Jones and Tim Hansen
 */
public class Serializer {

	// Methods

	/**
	 * Saves the current state of the world to a file.
	 * 
	 * @param world, the world to save
	 * @param filename, the path of the file to save it to
	 */
	public static void save(World world, String filename) {
		try (PrintWriter writer = new PrintWriter(new FileOutputStream(new File(filename)))) {
			writer.print(serialize(world));
		}catch(FileNotFoundException e) {
			System.out.println("File cannot be found.");
			JOptionPane.showMessageDialog(null, "Invalid Path");
		}
	}

	/**
	 * Loads a previously saved World from a file.
	 * 
	 * @param filename, the path of the file to attempt loading
	 * @return the world that was loaded
	 * @return null if filename is not a valid path to an existing file
	 * @return null if filename is valid but deserialization fails
	 */
	public static World load(String filename) {
		try(Scanner scanner = new Scanner(new FileInputStream(new File(filename)))) {
			World world = deserialize(scanner);
			return world;
		} catch(Exception e) {
			System.err.print(e.getMessage());
			JOptionPane.showMessageDialog(null, "Invalid Path");
			return null;
		}
	}

	/**
	 * Takes a world and returns a serialized version in a String
	 * 
	 * @param world the world to serialize
	 * @return the serialized version as a String
	 */
	public static String serialize(World world) {


		/*
		 * The first line of the file will contain the width, height and pixel size
		 * The second line will be blank
		 * The third line and onward will contain the coordinates of fuel
		 * 
		 * For example, a 300*200 world with a pixel size of 1 containing fuel at points (0,0), (10, 12), and (231, 168):
		 * 
		 * 300 200 1
		 * 
		 * 0 0
		 * 10 12
		 * 231 168
		 * 
		 * Note that the order of the coordinates doesn't matter and is nondeterministic due to
		 * the fuel being stored as a Set
		 */
		StringBuilder sb = new StringBuilder();
		sb.append(world.getWidth() + " " + world.getHeight() + " " + world.getPixelSize() + "\n\n"); // header and blank line
		Set<Point> fuel = world.getFuelSet();
		synchronized(fuel) {
			for(Point el : fuel) { // foreach loop for fuel coordinates
				sb.append(el.getX() + " " + el.getY() + "\n");
			}
		}
		sb.deleteCharAt(sb.length() - 1); // remove the last newline
		return sb.toString();
	}

	/**
	 * Takes a Scanner with a stream following the same specification as those
	 * generated by the {@link #serialize(World) serialize} method.
	 * If the given string follows the proper specification, it deserializes
	 * it into an instance of World.
	 * 
	 * @param scanner the Scanner to deserialize
	 * @return the world
	 * @return null if deserialization fails
	 */
	public static World deserialize(Scanner scanner) {

		try {
			// read the header
			int width = scanner.nextInt();
			int height = scanner.nextInt();
			int pixelSize = scanner.nextInt();
			World world = new World(width, height, pixelSize);
			// read the fuel coordinates
			while(scanner.hasNextLine()) {
				int x = scanner.nextInt();
				int y = scanner.nextInt();
				world.addFuelAt(new Point(x, y));
			}
			scanner.close();
			return world;
		} catch(Exception e) {
			System.err.println(e.getMessage());
			scanner.close();
			return null;
		}
	}

}